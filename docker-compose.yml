version: '3'
networks:
  reactive-streams-net:
    driver: bridge
services:
  # ------ Start zookeeper ------
  zookeeper:
    image: apachepulsar/pulsar:latest
    container_name: zookeeper
    restart: on-failure
    networks:
      - reactive-streams-net
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - PULSAR_MEM=-Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: [ "CMD", "bin/pulsar-zookeeper-ruok.sh" ]
      interval: 10s
      timeout: 5s
      retries: 30

  # ------ Init cluster metadata ------
  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    networks:
      - reactive-streams-net
    command: >
      bin/pulsar initialize-cluster-metadata \
               --cluster cluster-a \
               --zookeeper zookeeper:2181 \
               --configuration-store zookeeper:2181 \
               --web-service-url http://broker:8080 \
               --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

  # ------ Start bookie ------
  bookie:
    image: apachepulsar/pulsar:latest
    container_name: bookie
    restart: on-failure
    networks:
      - reactive-streams-net
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
      # otherwise every time we run docker compose uo or down we fail to start due to Cookie
      # See: https://github.com/apache/bookkeeper/blob/405e72acf42bb1104296447ea8840d805094c787/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java#L57-68
      - advertisedAddress=bookie
      - BOOKIE_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
    # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie"

  # ------ Start broker ------
  broker:
    image: apachepulsar/pulsar:latest
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - reactive-streams-net
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://broker:6650 # IF THE APPLICATION CONSUMING PULSAR IS OUTSIDE DOCKER, IT SHOULD BE 127.0.0.1
      - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker"
    healthcheck:
      test: [ "CMD-SHELL", "echo test" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # ------ MongoDB ------
  mongodb:
    container_name: mongodb
    hostname: mongodb
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=MyUser
      - MONGO_INITDB_ROOT_PASSWORD=MyCredential
    networks:
      - reactive-streams-net
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD-SHELL", "echo test"]
      interval: 10s
      timeout: 5s
      retries: 5
  # ------ Spring Services ------

  # ------ Topic Starter ------
  topic-starter:
    container_name: spring-pulsar-topic-starter
    build:
      context: pulsar-administrator
      dockerfile: Dockerfile
    networks:
      - reactive-streams-net
    healthcheck:
      test: [ "CMD-SHELL", "echo test" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      broker:
        condition: service_healthy


  # ------ Message Preparer ------
  message-preparer:
    container_name: message-preparer-service
    build:
      context: message-preparer
      dockerfile: Dockerfile
    networks:
      - reactive-streams-net
    ports:
      - "8081:8081"
    depends_on:
      topic-starter:
        condition: service_healthy

  # ------ Message Storer ------
  message-storer:
    container_name: message-storer-service
    build:
      context: message-storer
      dockerfile: Dockerfile
    environment:
      - MONGODB_CONNECTION_STRING=mongodb://MyUser:MyCredential@mongodb:27017/reactive_events_v2?authSource=admin
    networks:
      - reactive-streams-net
    ports:
      - "8082:8082"
    depends_on:
      topic-starter:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  # ------ PubSub WebApp ------
  pub-sub-web-app:
    container_name: pub-sub-web-application
    build:
      context: pub-sub-web-app
      dockerfile: Dockerfile
    environment:
      - MONGODB_CONNECTION_STRING=mongodb://MyUser:MyCredential@mongodb:27017/reactive_events_v2?authSource=admin
    networks:
      - reactive-streams-net
    ports:
      - "8083:8083"
    depends_on:
      topic-starter:
        condition: service_healthy